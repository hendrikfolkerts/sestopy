attribhelp;Entity nodes following multi-aspect nodes get an underscore attribute _NameOfTheNode. This attribute is an internal variable of the program and can neither selected nor edited. The underscore attribute is a variable initialized with \"0\" in the SES and during pruning this attribute gets the number of the generated child of an multi-aspect node as string value. These underscore attributes can only be accessed by the keyword \"PATH\" from attributes, aspectrules, priority, number of replications, couplings, and specrules - e.g. as parameters of an SES function.\n\nInsert a unique name for the variable name. The variable name must begin with a letter and can be followed with any alphanumeric. The variable name must not be 'PARENT', 'CHILDREN', 'NUMREP' or 'PATH'. Insert a value using Python syntax. You can insert any Python construct. If you want to define a string, please use \" or ' but do not mix them.\nThe name and the value can be edited by double clicking on them.\nWhen finished editing and a syntax error is found the variable is deleted.\nIf the attribute shall refer to an SES variable enter the sesvarname without \" or ' in the value field. If the attribute shall refer to an SES function enter sesfunname() without \" or ' in the value field. If you want to pass parameters to the function, you can do so passing them in the round bracket. sesvarname and sesfunname must be alphanumeric not beginning with a number. A reserved parameter is \"PATH\". PATH is a dictionary containing the names of the underscore variables in the path from the current node to the root as keys and the number of the during pruning created child of a multi-aspect node as value. The number of the created child in this dictionary is a string value. Please look at the next paragraph of this helptext and in the documentation for a comprehensive explanation of underscore variables. Please look at details for examples.\nIt is checked that the name of the SES variable or SES function exists and the SES function is executable. The value field is colored red if the SES variable or SES function does not exist or the SES function is not executable e.g. parameters for the SES function are missing, otherwise green. Therefore if several SES variables are referenced in an SES function all variables must exist.\nIn the comment field, any comment can be placed describing the attribute in detail.\nA special variable is a variable with the name 'mb' (not case-sensitive). This variable creates the link to a basic model in a model base. It usually has the name 'mb' and the value 'Name_of_MB/basic_model'.;Examples for the value:\n1   1.5   'abc'   [1, 2, 2.5]   ['a', 1, 'b', 4.5]   {1: 'a', 2: 'n'}   sesvarname   PATH   sesfunname()   sesfunname(4.5)   sesfunname(sesvarname)   sesfunname(sesvarname1, sesvarname2)   sesfunname(PATH);
asprulehelp;For every aspect node or maspect node one single aspectrule can be defined. This must be an expression using Python syntax which can be evaluated to a boolean expression. If a variable shall refer to an SES variable enter the sesvarname without \" or ' in the condition field. If a variable shall refer to an SES function enter sesfunname() without \" or ' in the condition field. If you want to pass parameters to the function, you can do so passing them in the round bracket. sesvarname and sesfunname must be alphanumeric not beginning with a number. A reserved parameter is \"PATH\". PATH is a dictionary containing the names of the underscore variables in the path from the current node to the root as keys and the number of the during pruning created child of a multi-aspect node as value. The number of the created child in this dictionary is a string value. Please look in the help of attributes and in the documentation for a comprehensive explanation of underscore variables. Please look at details for examples.\nIt is checked whether the name of the SES variable or SES function exists. If several SES variables are referenced in an SES function all variables must exist. The whole line is colored red if the condition can not be interpreted e.g. due to an missing SES variable or function. If the condition can be interpreted but the result is false only the condition field is colored green, the other fields are colored red. If the condition can be interpreted and the result is true the whole line is colored green. Using PATH in the condition may lead to a wrong result in the SES, since underscore variables are initialized with \"0\" and are recalculated during pruning.\nWhen selecting an aspect or maspect node it is searched for brothers of the same type. For every brother node of the same type as the selected node a line is created in which you can define an aspectrule. Only the line belonging to the selected node can be changed, the other lines are disabled and greyed out. Changing the node selection in the hierarchy model enables other lines.\n\nPruning an SES can lead to two or more aspect or maspect nodes in the same level. In order to prune it is necessary to sequence the nodes by giving a priority. A higher priority means the node is pruned preferred. An expression with sesvariables and/or sesfunctions must evaluate to a number. Coloring the line and possible values is like described in \"Number of Replications\". Using PATH may lead to a wrong result in the SES, since underscore variables are initialized with \"0\" and are recalculated during pruning.;Examples for the condition:\na==1     b==[1, 2]     sesvarname==1   sesfunname()=='a'   sesfunname(4.5)=='m'   sesfunname(sesvarname)==sesvarname2   sesfunname(sesvarname1, sesvarname2)=='i' and 1==1   \"abc\"==A and True   True   False   sesfunname(PATH)==1;
nrephelp;Enter an integer >=1 . If a variable shall refer to an SES function enter sesfunname() without \" or ' in the condition field. If you want to pass parameters to the function, you can do so passing them in the round bracket. sesvarname and sesfunname must be alphanumeric not beginning with a number. A reserved parameter is \"PATH\". PATH is a dictionary containing the names of the underscore variables in the path from the current node to the root as keys and the number of the during pruning created child of a multi-aspect node as value. The number of the created child in this dictionary is a string value. Please look in the help of attributes and in the documentation for a comprehensive explanation of underscore variables. Please look at details for examples.\nIt is checked whether the name of the SES variable or SES function exists. If several SES variables are referenced in an SES function all variables must exist. The line is colored red if the SES variable or SES function does not exist or the result is no integer >=1, otherwise green. Using PATH may lead to a wrong result in the SES, since underscore variables are initialized with \"0\" and are recalculated during pruning.;Examples for the value:\n1   12   sesvarname   sesfunname()   sesfunname(4.5)   sesfunname(sesvarname)   sesfunname(sesvarname1, sesvarname2)   sesfunname(PATH);
couphelp;Couplings can be defined using a coupling iterator list or using SES functions. For multi aspect nodes a coupling function has to be used since for every child a coupling iterator list would have to be defined. For the definition of a coupling the source node and the sink node have to be selected from the dropdown menus. The source port and the sink port have to be defined in a list in the line below the dropdown menus. Several ports for a source node and a sink node can be defined at once. For details see examples. Please always decide for a direction of flow, do not mix source ports and sink ports. When couplings are inserted, the name and type of the ports can be adapted by double clicking the \"port name / type\" field of the inserted node in the couplinglist.\n\nIf the coupling is defined by an SES function a list of the SES functions can be selected from a dropdown menu. The selected function is inserted in the line below. If the function can not be interpreted e.g. since parameters are missing the line is colored red, otherwise green.\nAs function parameters it is possible to pass the node specific values \"PARENT\", \"CHILDREN\", \"NUMREP\", and \"PATH\". PARENT refers to the parent's name of the current node, CHILDREN passes a list of the children's names of the current node, NUMREP refers to the number of replication of the current node, and PATH lists the underscore variables in the path from the current node to the root. The PARENT is a string with the parent's name of the current node, the CHILDREN is a list consisting of the children's names of the current node, [child1name, child2name, ...], whereas the NUMREP is just an integer value containing the number of replications. PATH is a dictionary containing the names of the underscore variables in the path from the current node to the root as keys and the number of the during pruning created child of a multi-aspect node as value. The number of the created child in this dictionary is a string value. Please look in the help of attributes and in the documentation for a comprehensive explanation of underscore variables.\n\nIf the coupling is defined by an SES function the coupling iterator list is greyed out and vice versa. The result of the coupling function is printed below the entry of the coupling function. Make sure, that all used SES variables and SES functions exist and that the result is something like\n[[\"sourcenodename\",\"sourcenodeport / porttype\",\"sinknodename\",\"sinknodeport / porttype\",\"comment\"]]\nor\n[[\"sourcenodename\",\"sourcenodeport / porttype\",\"sinknodename\",\"sinknodeport / porttype\",\"comment\"],[\"sourcenodename\",\"sourcenodeport / porttype\",\"sinknodename\",\"sinknodeport / porttype\",\"comment\"],...]\nand make sure that the sourcenodename and the sinknodenames equal one parent's or child's name. Usage of the PARENT and CHILDREN attributes are helpful for this (see examples). Furthermore, make sure, the sourceport and sinkport are strings and no arrayindex refers to a nonexistent element (e.g. in the childrenlist when passing CHILDREN). Note the whitespaces and the / separating the portnames from the porttypes (the types of ports of basic models, which are connected by the couplings).\n\nPossible porttypes are SPR, SPI, SPB, PPEA or PPMT (SPR = SignalPortReal, SPI = SignalPortInteger, SPB = SignalPortBoolean, PPEA = PhysicalPortElectricalAnalog, PPMT = PhysicalPortMechanicsTranslational).\n\nUsing PATH may lead to a wrong result in the SES, since underscore variables are initialized with \"0\" and are recalculated during pruning.\n\nPlease see the documentation and examples.;Examples for the coupling iterator list:\nThe selection of a source node and a sink node is assumed:\n[1, 2]     \n[Out1, In2][2, 1]\nExamples for couplings using SES functions:\ncplfcn(PARENT,CHILDREN,NUMREP)   cplfcn(PATH, PARENT);
specrulehelp;For every child of a specnode a single specrule can be defined. This must be an expression using Python syntax which can be evaluated to a boolean expression. If a variable shall refer to an SES variable enter the sesvarname without \" or ' in the condition field. If a variable shall refer to an SES function enter sesfunname() without \" or ' in the condition field. If you want to pass parameters to the function, you can do so passing them in the round bracket. sesvarname and sesfunname must be alphanumeric not beginning with a number. A reserved parameter is \"PATH\". PATH is a dictionary containing the names of the underscore variables in the path from the current node to the root as keys and the number of the during pruning created child of a multi-aspect node as value. The number of the created child in this dictionary is a string value. Please look in the help of attributes and in the documentation for a comprehensive explanation of underscore variables. Please look at details for examples.\nIt is checked whether the name of the SES variable or SES function exists. If several SES variables are referenced in an SES function all variables must exist. The whole line is colored red if the condition can not be interpreted e.g. due to an missing SES variable or function. If the condition can be interpreted but the result is false only the condition field is colored green, the other fields are colored red. If the condition can be interpreted and the result is true the whole line is colored green. Using PATH in the condition may lead to a wrong result in the SES, since underscore variables are initialized with \"0\" and are recalculated during pruning.\nWhen selecting a spec node for every child a line is created in which you can define the child specific specrule.;Examples for the condition:\na==1     b==[1, 2]     sesvarname==1   sesfunname()=='a'   sesfunname(4.5)=='m'   sesfunname(sesvarname)==sesvarname2   sesfunname(sesvarname1, sesvarname2)=='i' and 1==1   \"abc\"==A and True   True   False   sesfunname(PATH)==1;
sespeshelp;Select whether the model is a model of an SES or a model of a PES. A global SES comment can be entered.;;
sesvarhelp;Insert a unique name for the variable name. The variable name must begin with a letter and can be followed with any alphanumeric. The variable name must not be the name of an SES function, 'PARENT', 'CHILDREN', 'NUMREP' or 'PATH'.\nInsert a value using Python syntax. You can insert any Python construct. If you want to define a string, please use \" or ' but do not mix them.\nThe name and the value can be edited by double clicking on them.\nWhen finished editing and a syntax error is found the variable is deleted.;Examples for the value:\n1   1.5   'abc'   [1, 2, 2.5]   ['a', 1, 'b', 4.5]   {1: 'a', 2: 'm'};
semconhelp;Insert a boolean expression for the SES variables using Python syntax. After input the program tries to interprete the expression using the SES variables.\nIf the SES variable(s) used in the semantic condition can not be found the background of the corresponding line is colored red and no result is printed.\nIf the SES variable(s) used in the semantic condition can be found the background of the corresponding cell is colored green. The expression is evaluated and depending on the result (True / False) the result cell in the corresponding line is colored green or red. Furthermore, if all semantic conditions are okay, a green hook is set on the ToolBox bar.;Examples (a and b are SES variables):\na==b   a==1   a>b   a=='n'   a==['n', 4, 5]   a=={1: 'n', 2: 'm'}   a.get(2)=='m'   0<a and a<2   0<a<2;
selconhelp;Choose a startnode from the tree. Choose one or more targetnode(s) from the tree. It is watched that only allowed nodes can be selected. If you want to change your selection use the clear selection button. When inserting the chosen constraints a color for the constraints must be selected. The chosen nodes are colored in the hierarchy model respectively. If a name is changed in the hierarchy model the selection constraints are updated. If a node defined in the selection constraints is deleted in the hierarchy model the regarding selection constraint is deleted.;;
sesfunhelp;Choose a file containing a correctly defined Python function. The name of the function is extracted from def name(...) and the syntax of the function is verified. The function name must not be the name of an SES variable, 'PARENT', 'CHILDREN', 'NUMREP' or 'PATH'. An SES function can be copied with the key combination Ctrl+C.;;
