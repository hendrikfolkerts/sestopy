SES JSON Version 1 - DO NOT EDIT THIS FILE MANUALLY!
Generated by SESToPy (University of Applied Sciences Wismar, Research Group Computational Engineering and Automation); Contact: Prof. Dr.-Ing. Thorsten Pawletta, thorsten.pawletta@hs-wismar.de; developed by Hendrik Martin Folkerts originally using Python 3.4.1 and PyQt 5.5
System Entity Structure tree with settings generated by SESToPy (University of Applied Sciences Wismar, Research Group Computational Engineering and Automation)
Created: 2021-03-27 15:42:04
[["1", "Entity Node", "plant", "0", "#000000", "False", [], [], [], "1", [], "1", "0"], ["2", "Maspect Node", "plantMASP", "1", "#000000", "False", [], [["plantMASP", "2", "", "", ""]], [], "NumPartialPlants", [], "1", "1"], ["3", "Entity Node", "partialPlant", "2", "#000000", "False", [["_partialPlant", "0", "", "internal variable"], ["type", "ppfun(PATH,PartialPlantTypes)", "x", ""]], [], [], "1", [], "1", "2"], ["4", "Spec Node", "partialPlantSPEC", "3", "#000000", "False", [], [], [], "1", [["powerStation", "5", "ppTypesFun(PATH,PartialPlantTypes)=='ps'", "F", ""], ["chemicalProductions", "48", "ppTypesFun(PATH,PartialPlantTypes)=='cp'", "F", ""], ["wasteTreatment", "34", "ppTypesFun(PATH,PartialPlantTypes)=='wt'", "T", ""]], "1", "3"], ["5", "Entity Node", "powerStation", "4", "#000000", "False", [], [], [], "1", [], "1", "4"], ["61", "Aspect Node", "powerStationDEC", "5", "#000000", "False", [], [["powerStationDEC", "61", "", "", ""]], [], "1", [], "1", "5"], ["81", "Entity Node", "psPipes", "61", "#000000", "False", [], [], [], "1", [], "1", "6"], ["68", "Entity Node", "psCtrlSyss", "61", "#000000", "False", [], [], [], "1", [], "1", "6"], ["82", "Entity Node", "psValves", "61", "#000000", "False", [], [], [], "1", [], "1", "6"], ["48", "Entity Node", "chemicalProductions", "4", "#000000", "False", [], [], [], "1", [], "1", "4"], ["49", "Maspect Node", "chemicalProductionsMASP", "48", "#000000", "False", [], [], [], "cpNumFun(PATH,PartialPlantTypes,NumChemicalProductions)", [], "1", "5"], ["50", "Entity Node", "chemicalProduction", "49", "#000000", "False", [["_chemicalProduction", "0", "", "internal variable"]], [], [], "1", [], "1", "6"], ["51", "Spec Node", "chemicalProductionSPEC", "50", "#000000", "False", [], [], [], "1", [["acid", "87", "cpTypesFun(PATH, PartialPlantTypes, ChemicalProductionTypes)=='ac'", "T", ""], ["base", "94", "cpTypesFun(PATH, PartialPlantTypes, ChemicalProductionTypes)=='ba'", "F", ""]], "1", "7"], ["87", "Entity Node", "acid", "51", "#000000", "False", [], [], [], "1", [], "1", "8"], ["88", "Aspect Node", "acidDEC", "87", "#000000", "False", [], [["acidDEC", "88", "", "", ""]], [], "1", [], "1", "9"], ["89", "Entity Node", "pipes", "88", "#000000", "False", [], [], [], "1", [], "1", "10"], ["90", "Entity Node", "ctrlSyss", "88", "#000000", "False", [], [], [], "1", [], "1", "10"], ["92", "Maspect Node", "ctrlSyssMASP", "90", "#000000", "False", [], [["ctrlSyssMASP", "102", "", "", ""]], [], "cpCtrlFun(PATH, PartialPlantTypes, NumCtrlSysChemicalProductions)", [], "1", "11"], ["93", "Entity Node", "ctrlSys", "92", "#000000", "False", [["_ctrlSys", "0", "", "internal variable"]], [], [], "1", [], "1", "12"], ["91", "Entity Node", "valves", "88", "#000000", "False", [], [], [], "1", [], "1", "10"], ["94", "Entity Node", "base", "51", "#000000", "False", [], [], [], "1", [], "1", "8"], ["95", "Aspect Node", "baseDEC", "94", "#000000", "False", [], [], [], "1", [], "1", "9"], ["96", "Entity Node", "pipes", "95", "#000000", "False", [], [], [], "1", [], "1", "10"], ["101", "Entity Node", "ctrlSyss", "95", "#000000", "False", [], [], [], "1", [], "1", "10"], ["102", "Maspect Node", "ctrlSyssMASP", "101", "#000000", "False", [], [["ctrlSyssMASP", "102", "", "", ""]], [], "cpCtrlFun(PATH, PartialPlantTypes, NumCtrlSysChemicalProductions)", [], "1", "11"], ["103", "Entity Node", "ctrlSys", "102", "#000000", "False", [["_ctrlSys", "0", "", "internal variable"]], [], [], "1", [], "1", "12"], ["100", "Entity Node", "valves", "95", "#000000", "False", [], [], [], "1", [], "1", "10"], ["34", "Entity Node", "wasteTreatment", "4", "#000000", "False", [], [], [], "1", [], "1", "4"], ["71", "Aspect Node", "wasteTreatmentDEC", "34", "#000000", "False", [], [["wasteTreatmentDEC", "71", "", "", ""]], [], "1", [], "1", "5"], ["83", "Entity Node", "wtPipes", "71", "#000000", "False", [], [], [], "1", [], "1", "6"], ["78", "Entity Node", "wtCtrlSyss", "71", "#000000", "False", [], [], [], "1", [], "1", "6"], ["84", "Entity Node", "wtValves", "71", "#000000", "False", [], [], [], "1", [], "1", "6"]]
[["ses", ""]]
[["NumPartialPlants", "4", ""], ["PartialPlantTypes", "['ps', 'cp', 'cp', 'wt']", ""], ["NumChemicalProductions", "[2, 1]", ""], ["ChemicalProductionTypes", "[['ac', 'ba'], ['ac']]", ""], ["NumCtrlSysChemicalProductions", "[[5, 4], [3]]", ""]]
[["NumPartialPlants==int(NumPartialPlants) and NumPartialPlants>0", "T"], ["all([element in ['ps','cp','wt'] for element in PartialPlantTypes])", "T"], ["NumPartialPlants==len(PartialPlantTypes)", "T"], ["all([(element==int(element) and element>0) for element in NumChemicalProductions])", "T"], ["PartialPlantTypes.count('cp')==len(NumChemicalProductions)", "T"], ["len(NumChemicalProductions)==len(ChemicalProductionTypes)", "T"], ["all([all([iE in ['ac', 'ba'] for iE in element]) for element in ChemicalProductionTypes])", "T"], ["all([len(ChemicalProductionTypes[el])==NumChemicalProductions[el] for el in range(len(ChemicalProductionTypes))])", "T"], ["len(NumChemicalProductions)==len(NumCtrlSysChemicalProductions)", "T"], ["all([all([(iE==int(iE) and iE>0) for iE in element]) for element in NumCtrlSysChemicalProductions])", "T"], ["all([len(NumCtrlSysChemicalProductions[el])==NumChemicalProductions[el] for el in range(len(ChemicalProductionTypes))])", "T"]]
[]
[["ppTypesFun", "def ppTypesFun(pathToRoot, ppTypes):\n\t\"\"\"\n\twhich type a partial plant has\n\t\"\"\"\n\t#find partial plant\n\tcurNumPP = pathToRoot[\"_partialPlant\"]\n\t#the value of curNumPP is a string\n\tcurNumPP = int(curNumPP)\n\t#map to ppTypes -> type of partial plant\n\ttypePP = ppTypes[curNumPP-1]\n\treturn typePP\n"], ["cpNumFun", "def cpNumFun(pathToRoot, ppTypes, cpNum):\n\t\"\"\"\n\tthe number of chemical productions of one partial plant\n\t\"\"\"\n\t#find partial plant\n\tcurNumPP = pathToRoot[\"_partialPlant\"]\n\t#the value of curNumPP is a string\n\tcurNumPP = int(curNumPP)\n\t#map to ppTypes -> type of partial plant\n\ttypePP = ppTypes[curNumPP-1]\n\t#when \"chemical productions\" find out how many\n\t#single \"chemical production\"s\n\tif typePP == \"cp\":\n\t\t#find out which index the \"cp\" is in the list\n\t\t#find all occurrences of \"cp\" first\n\t\tall_occurrences_cp = []\n\t\tlast_found_index = -1\n\t\telement_found = True\n\t\twhile element_found:\n\t\t\ttry:\n\t\t\t\tlast_found_index = ppTypes.index(\"cp\", last_found_index + 1)\n\t\t\t\tall_occurrences_cp.append(last_found_index)\n\t\t\texcept ValueError:\n\t\t\t\telement_found = False\n\t\t#all_occurrences_cp now holds a list of the indices with \"cp\"\n\t\t#find out at which place in all_occurrences_cp the current curNumPP is\n\t\tindexOfCurNumPP = all_occurrences_cp.index(curNumPP-1)\n\t\t#now map to the list with the number of chemical productions cpNum\n\t\tnumCP = cpNum[indexOfCurNumPP]\n\t\treturn numCP\n\telse:\n\t\treturn 1\n"], ["cpTypesFun", "def cpTypesFun(pathToRoot, ppTypes, cpTypes):\n\t\"\"\"\n\twhich type a chemical production has\n\t\"\"\"\n\t#find partial plant\n\tcurNumPP = pathToRoot[\"_partialPlant\"]\n\t#the value of curNumPP is a string\n\tcurNumPP = int(curNumPP)\n\t#map to ppTypes -> type of partial plant\n\ttypePP = ppTypes[curNumPP-1]\n\t#when \"chemical productions\" find out how many\n\t#single \"chemical production\"s\n\tif typePP == \"cp\":\n\t\t#find out which index the \"cp\" is in the list\n\t\t#find all occurrences of \"cp\" first\n\t\tall_occurrences_cp = []\n\t\tlast_found_index = -1\n\t\telement_found = True\n\t\twhile element_found:\n\t\t\ttry:\n\t\t\t\tlast_found_index = ppTypes.index(\"cp\", last_found_index + 1)\n\t\t\t\tall_occurrences_cp.append(last_found_index)\n\t\t\texcept ValueError:\n\t\t\t\telement_found = False\n\t\t#all_occurrences_cp now holds a list of the indices with \"cp\"\n\t\t#find out at which place in all_occurrences_cp the current curNumPP is\n\t\tindexOfCurNumPP = all_occurrences_cp.index(curNumPP-1)\n\t\t#now map to the list with the type of chemical productions cpTypes\n\t\t#find chemical production\n\t\tcurNumCP = pathToRoot[\"_chemicalProduction\"]\n\t\t# the value of curNumPP is a string\n\t\tcurNumCP = int(curNumCP)\n\t\t#map to cpTypes\n\t\tcpType = cpTypes[indexOfCurNumPP][curNumCP-1]\n\t\treturn cpType\n\telse:\n\t\treturn \"ac\""], ["cpCtrlFun", "def cpCtrlFun(pathToRoot, ppTypes, cpCtrlsNum):\n\t\"\"\"\n\thow many controllers a chemical production has\n\t\"\"\"\n\t#find partial plant\n\tcurNumPP = pathToRoot[\"_partialPlant\"]\n\t#the value of curNumPP is a string\n\tcurNumPP = int(curNumPP)\n\t#map to ppTypes -> type of partial plant\n\ttypePP = ppTypes[curNumPP-1]\n\t#when \"chemical productions\" find out how many\n\t#single \"chemical production\"s\n\tif typePP == \"cp\":\n\t\t#find out which index the \"cp\" is in the list\n\t\t#find all occurrences of \"cp\" first\n\t\tall_occurrences_cp = []\n\t\tlast_found_index = -1\n\t\telement_found = True\n\t\twhile element_found:\n\t\t\ttry:\n\t\t\t\tlast_found_index = ppTypes.index(\"cp\", last_found_index + 1)\n\t\t\t\tall_occurrences_cp.append(last_found_index)\n\t\t\texcept ValueError:\n\t\t\t\telement_found = False\n\t\t#all_occurrences_cp now holds a list of the indices with \"cp\"\n\t\t#find out at which place in all_occurrences_cp the current curNumPP is\n\t\tindexOfCurNumPP = all_occurrences_cp.index(curNumPP-1)\n\t\t#now map to the list with number of controllers cpCtrlsNum\n\t\t#find chemical production\n\t\tcurNumCP = pathToRoot[\"_chemicalProduction\"]\n\t\t# the value of curNumPP is a string\n\t\tcurNumCP = int(curNumCP)\n\t\t#map to cpCtrlsNum\n\t\tcpCtrlsNum = cpCtrlsNum[indexOfCurNumPP][curNumCP-1]\n\t\treturn cpCtrlsNum\n\telse:\n\t\treturn 1"]]